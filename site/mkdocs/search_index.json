{
    "docs": [
        {
            "location": "/", 
            "text": "What is Javascript?\n\n\n\n\nJavaScript is a high-level, dynamic, untyped, and interpreted programming language. It has been standardized in the ECMAScript language specification. Alongside HTML and CSS, it is one of the three core technologies of World Wide Web content production; the majority of websites employ it and it is supported by all modern Web browsers without plug-ins. JavaScript is prototype-based with first-class functions, making it a multi-paradigm language, supporting object-oriented, imperative, and functional programming styles. It has an API for working with text, arrays, dates and regular expressions, but does not include any I/O, such as networking, storage, or graphics facilities, relying for these upon the host environment in which it is embedded.\n\n\n\n\nBooks\n\n\n\n\n\n\n\n\nCourses\n\n\n\n\n\n\n\n\nVideos", 
            "title": "Home"
        }, 
        {
            "location": "/#what-is-javascript", 
            "text": "JavaScript is a high-level, dynamic, untyped, and interpreted programming language. It has been standardized in the ECMAScript language specification. Alongside HTML and CSS, it is one of the three core technologies of World Wide Web content production; the majority of websites employ it and it is supported by all modern Web browsers without plug-ins. JavaScript is prototype-based with first-class functions, making it a multi-paradigm language, supporting object-oriented, imperative, and functional programming styles. It has an API for working with text, arrays, dates and regular expressions, but does not include any I/O, such as networking, storage, or graphics facilities, relying for these upon the host environment in which it is embedded.", 
            "title": "What is Javascript?"
        }, 
        {
            "location": "/#books", 
            "text": "", 
            "title": "Books"
        }, 
        {
            "location": "/#courses", 
            "text": "", 
            "title": "Courses"
        }, 
        {
            "location": "/#videos", 
            "text": "", 
            "title": "Videos"
        }, 
        {
            "location": "/install/", 
            "text": "Installation\n\n\n\n\nGoogle Chrome\n\n\nPycharm", 
            "title": "Installation"
        }, 
        {
            "location": "/install/#installation", 
            "text": "Google Chrome  Pycharm", 
            "title": "Installation"
        }, 
        {
            "location": "/ide/", 
            "text": "IDE\n\n\nGoogle Chrome Developer Tools\n\n\n\n\nThe Chrome Developer Tools (DevTools for short), are a set of web authoring and debugging tools built into Google Chrome. The DevTools provide web developers deep access into the internals of the browser and their web application. Use the DevTools to efficiently track down layout issues, set JavaScript breakpoints, and get insights for code optimization.", 
            "title": "IDE"
        }, 
        {
            "location": "/ide/#ide", 
            "text": "Google Chrome Developer Tools   The Chrome Developer Tools (DevTools for short), are a set of web authoring and debugging tools built into Google Chrome. The DevTools provide web developers deep access into the internals of the browser and their web application. Use the DevTools to efficiently track down layout issues, set JavaScript breakpoints, and get insights for code optimization.", 
            "title": "IDE"
        }, 
        {
            "location": "/basic_syntax/", 
            "text": "1. Code Formatting\n\n\nIndent with 2 spaces\n\n\n// Object initializer.\nvar inset = {\n  top: 10,\n  right: 20,\n  bottom: 15,\n  left: 12\n};\n\n// Array initializer.\nthis.rows_ = [\n  '\nSlartibartfast\n \nfjordmaster@magrathea.com\n',\n  '\nZaphod Beeblebrox\n \ntheprez@universe.gov\n',\n  '\nFord Prefect\n \nford@theguide.com\n',\n  '\nArthur Dent\n \nhas.no.tea@gmail.com\n',\n  '\nMarvin the Paranoid Android\n \nmarv@googlemail.com\n',\n  'the.mice@magrathea.com'\n];\n\n// Used in a method call.\ngoog.dom.createDom(goog.dom.TagName.DIV, {\n  id: 'foo',\n  className: 'some-css-class',\n  style: 'display:none'\n}, 'Hello, world!');\n\n\n\n\n2. Naming\n\n\nfunctionNamesLikeThis\nvariableNamesLikeThis\nClassNamesLikeThis\nEnumNamesLikeThis\nmethodNamesLikeThis\nCONSTANT_VALUES_LIKE_THIS\nfoo.namespaceNamesLikeThis.bar\nfilenameslikethis.js.\n\n\n\n\n3. Comment\n\n\nUse \nJSDoc\n\n\n3.1 Class Comment\n\n\n/**\n * Class making something fun and easy.\n * @param {string} arg1 An argument that makes this more interesting.\n * @param {Array.\nnumber\n} arg2 List of numbers to be processed.\n * @constructor\n * @extends {goog.Disposable}\n */\nproject.MyClass = function(arg1, arg2) {\n  // ...\n};\ngoog.inherits(project.MyClass, goog.Disposable);\n\n\n\n\n3.2 Method Comment\n\n\n/**\n * Operates on an instance of MyClass and returns something.\n * @param {project.MyClass} obj Instance of MyClass which leads to a long\n *     comment that needs to be wrapped to two lines.\n * @return {boolean} Whether something occurred.\n */\nfunction PR_someMethod(obj) {\n  // ...\n}\n\n\n\n\n4. Expression and Statements\n\n\nExpression\n\n\nA fragment of code that produces a value is called an Expression\n\n\n22\n\nthis is an epression\n\n(5 \n 6) ? false : true\n\n\n\n\nStatements\n\n\nThe Simplest kind of stagement is an expression with a semi colon\n\n\n!false;\n5 + 6;\n\n\n\n\n5. Loop and iteration\n\n\nwhile\n\n\nvar number = 0;\nwhile (number \n= 12) {\n  console.log(number);\n  number = number + 2;\n}\n\n\n\n\ndo..while\n\n\ndo {\n  var yourName = prompt(\nWho are you?\n);\n} while (!yourName);\nconsole.log(yourName);\n\n\n\n\nfor\n\n\nfor (var i = 0; i \n 10; i++) {\n  console.log(i);\n}\n\n\n\n\n6. Function\n\n\n6.1 Defining a Function\n\n\nvar square = function(x) {\n  return x * x;\n};\nsquare(5);\n\n\n\n\n6.2 Scope\n\n\nScope is the area where contains all variable or function are living. \n\n\nScope has some rules:\n\n\n\n\nChild Scope can access all variable and function in parent Scope. (E.g: Local Scope can access Global Scope)\n\n\n\n\nfunction saveName(firstName) {\n    var temp = \ntemp\n;\n    function capitalizeName() {\n        temp = temp + \n here\n;\n        return firstName.toUpperCase();\n    }\n    var capitalized = capitalizeName();\n    return capitalized;\n}\nalert(saveName(\nRobert\n));\n\n\n\n\n\n\nBut parent Scope can access variable and function inside children scope (E.g: Global Scope cannot acces to local Scope)\n\n\n\n\nfunction talkDirty () {\n    var saying = \nOh, you little VB lover, you\n;\n    return alert(saying);\n}\nalert(saying); //-\nError\n\n\n\n\n6.3 Call Stack\n\n\nThe storage where computer stores context is called CALL STACK.\n\n\n// CALL STACK\nfunction greet(who) {\n    console.log(\nHello \n + who);\n    ask(\nHow are you?\n);\n    console.log(\nI'm fine\n);\n};\n\nfunction ask(question) {\n    console.log(\nwell, \n + question);\n};\n\ngreet(\nHarry\n);\nconsole.log(\nBye\n);\n\n\n\n\nOut of Call Stack\n\n\nfunction chicken() {\n    return egg();\n}\n\nfunction egg() {\n    return chicken();\n}\nconsole.log(chicken() + \n came first\n);\n\n\n\n\n6.4. Optional Argument\n\n\nWe can pass too many or too few arguments to the function without any SyntaxError.\n\n\n\n\nIf we pass too much arguments, the extra ones are ignored\n\n\nIf we pass to few arguments, the missing ones get value undefined\n\n\n\n\nfunction power(base, exponent) {\n    if (exponent == undefined) {\n        exponent = 2;\n    }\n    var result = 1;\n    for (var count = 0; count \n exponent; count++) {\n        result = result * base;\n    }\n    return result;\n}\nconsole.log(power(4)); \nconsole.log(power(4,3));\n\n\n\n\nupside\n: flexible \n\n\ndownside\n: hard to control the error\n\n\n6.5 Closure\n\n\nLook at this example:\n\n\nfunction sayHello(name){\n    var text = 'Hello' + name;\n    var say = function(){\n        console.log(text);\n    }\n    return say;\n}\nvar say2 = sayHello(\nahaha\n);\nsay2();\n\n\n\n\nif in C program, does say2() work? \n\nThe answer is nope! Because in C program, when a function returns, the Stack-flame will be destroyed, and all the local variable such as \ntext\n will undefinded. So, when say2() is called, there is no text anymore, and the error, will be shown! \n\nBut, in JavaScript, This code works!! Because, it provides for us an Object called Closure! Closure is borned when we define a function in another function, it keep all the live local variable. So, when say2() is called, the closure will give all the value of local variable outside it, and text will be identity.!\n\n\nvar globalVariable = 10;\nfunction func(){\n    var name = \nxxx\n;\n    function getName(){\n        return name;\n    }\n    function speak(){\n        var sound = \nalo\n;\n        function scream(){\n            console.log(globalVariable);\n            console.log(name);\n            return \naaaaaaaaaa!\n;\n        }\n        function talk(){\n            var voice = getName() + \n speak \n + sound;\n            console.log(voice);\n            return voice;\n        }\n        scream();\n        talk();\n    }\n    speak();\n}\nfunc();\n\n\n\n\n6.6. Recursion\n\n\nRecursion is  function can call itself, as long as it is not overflow\n\n\nfunction power(base, exponent){\n    if (exponent == 0){\n        return 1;\n    }\n    else{\n        return base * power(base, exponent -1);\n    } \n}\nconsole.log(power(2,3));\n\nfunction FindSolution(target){\n    function Find(start, history){\n        if (start == target){\n            return history;\n        }\n        else if (start \n target){\n            return null;\n        } \n        else{\n            return Find(start + 5, \n(\n + history + \n + 5 \n) ||\n            Find(start * 3, \n(\n + history + \n * 3)\n);\n        }\n    }\n    return Find(1, \n1\n);\n}\nconsole.log(FindSolution(25));   \n\n\n\n\n6.7. Arguments object\n\n\nThe arguments object contains all parameters you pass to a function.\n\n\nfunction argumentCounter() {\n    console.log(\nyou gave me\n, arguments.length, \nargument.\n);\n}\nargumentCounter(\nStraw man\n, \nTautology\n, \nAd hominem\n);\n\n\n\n\n6.8. Higher-Order Function\n\n\n###Filter array\nvar ancestry = JSON.parse(ANCESTRY_FILE);\nconsole.log(ancestry.length);\n\nfunction filter(array, test) {\n    var passed = [];\n    for (var i = 0; i \n array.length; i++){\n        if (test(array[i])){\n            passed.push(array[i]);\n        }\n    }\n    return passed;\n}\nconsole.log(filter(ancestry, function(person){\n    return person.born \n 1900 \n person.born \n 1925;\n}));\n\n### TRANSFORMING WITH A MAP\nfunction map(array, transform) {\n  var mapped = [];\n  for (var i = 0; i \n array.length; i++)\n    mapped.push(transform(array[i]));\n  return mapped;\n}\n\nvar overNinety = ancestry.filter(function(person) {\n  return person.died - person.born \n 90;\n});\nconsole.log(map(overNinety, function(person) {\n  return person.name;\n}));\n\n\n### REDUCE\nfunction reduce(array, combine, start) {\n  var current = start;\n  for (var i = 0; i \n array.length; i++)\n    current = combine(current, array[i]);\n  return current;\n}\nconsole.log(reduce([1, 2, 3, 4], function(a, b) {\n  return a + b;\n}, 0));\n#Problem: using map and reduce, transform [1,2,3,4] to [1,2],[3,4]\n\nvar a = [1, 2, 3, 4]\na = _.map(a, function(i){\n    if(i % 2 == 0){\n        return [[],[i]]\n    } else {\n        return [[i], []]\n    }\n});\na = _.reduce(a, function(x, y){\n   return [x[0].concat(y[0]), x[1].concat(y[1])]\n})\n\n\n### BINDING FUNCTION\nvar theSet = [\nCarel Haverbeke\n, \nMaria van Brussel\n,\n              \nDonald Duck\n];\nfunction isInSet(set, person) {\n  return set.indexOf(person.name) \n -1;\n}\n\nconsole.log(ancestry.filter(function(person) {\n  return isInSet(theSet, person);\n}));\nconsole.log(ancestry.filter(isInSet.bind(null, theSet)));\n\n\n\n\n\n\n\n\n\n\n\n\nWhat's the cleanest way to write a multiline string in JavaScript? [duplicate]\n\n\n\n\n\n\nGoogle JavaScript Style Guide", 
            "title": "Basic Syntax"
        }, 
        {
            "location": "/basic_syntax/#1-code-formatting", 
            "text": "Indent with 2 spaces  // Object initializer.\nvar inset = {\n  top: 10,\n  right: 20,\n  bottom: 15,\n  left: 12\n};\n\n// Array initializer.\nthis.rows_ = [\n  ' Slartibartfast   fjordmaster@magrathea.com ',\n  ' Zaphod Beeblebrox   theprez@universe.gov ',\n  ' Ford Prefect   ford@theguide.com ',\n  ' Arthur Dent   has.no.tea@gmail.com ',\n  ' Marvin the Paranoid Android   marv@googlemail.com ',\n  'the.mice@magrathea.com'\n];\n\n// Used in a method call.\ngoog.dom.createDom(goog.dom.TagName.DIV, {\n  id: 'foo',\n  className: 'some-css-class',\n  style: 'display:none'\n}, 'Hello, world!');", 
            "title": "1. Code Formatting"
        }, 
        {
            "location": "/basic_syntax/#2-naming", 
            "text": "functionNamesLikeThis\nvariableNamesLikeThis\nClassNamesLikeThis\nEnumNamesLikeThis\nmethodNamesLikeThis\nCONSTANT_VALUES_LIKE_THIS\nfoo.namespaceNamesLikeThis.bar\nfilenameslikethis.js.", 
            "title": "2. Naming"
        }, 
        {
            "location": "/basic_syntax/#3-comment", 
            "text": "Use  JSDoc", 
            "title": "3. Comment"
        }, 
        {
            "location": "/basic_syntax/#31-class-comment", 
            "text": "/**\n * Class making something fun and easy.\n * @param {string} arg1 An argument that makes this more interesting.\n * @param {Array. number } arg2 List of numbers to be processed.\n * @constructor\n * @extends {goog.Disposable}\n */\nproject.MyClass = function(arg1, arg2) {\n  // ...\n};\ngoog.inherits(project.MyClass, goog.Disposable);", 
            "title": "3.1 Class Comment"
        }, 
        {
            "location": "/basic_syntax/#32-method-comment", 
            "text": "/**\n * Operates on an instance of MyClass and returns something.\n * @param {project.MyClass} obj Instance of MyClass which leads to a long\n *     comment that needs to be wrapped to two lines.\n * @return {boolean} Whether something occurred.\n */\nfunction PR_someMethod(obj) {\n  // ...\n}", 
            "title": "3.2 Method Comment"
        }, 
        {
            "location": "/basic_syntax/#4-expression-and-statements", 
            "text": "", 
            "title": "4. Expression and Statements"
        }, 
        {
            "location": "/basic_syntax/#expression", 
            "text": "A fragment of code that produces a value is called an Expression  22 this is an epression \n(5   6) ? false : true", 
            "title": "Expression"
        }, 
        {
            "location": "/basic_syntax/#statements", 
            "text": "The Simplest kind of stagement is an expression with a semi colon  !false;\n5 + 6;", 
            "title": "Statements"
        }, 
        {
            "location": "/basic_syntax/#5-loop-and-iteration", 
            "text": "", 
            "title": "5. Loop and iteration"
        }, 
        {
            "location": "/basic_syntax/#while", 
            "text": "var number = 0;\nwhile (number  = 12) {\n  console.log(number);\n  number = number + 2;\n}", 
            "title": "while"
        }, 
        {
            "location": "/basic_syntax/#dowhile", 
            "text": "do {\n  var yourName = prompt( Who are you? );\n} while (!yourName);\nconsole.log(yourName);", 
            "title": "do..while"
        }, 
        {
            "location": "/basic_syntax/#for", 
            "text": "for (var i = 0; i   10; i++) {\n  console.log(i);\n}", 
            "title": "for"
        }, 
        {
            "location": "/basic_syntax/#6-function", 
            "text": "", 
            "title": "6. Function"
        }, 
        {
            "location": "/basic_syntax/#61-defining-a-function", 
            "text": "var square = function(x) {\n  return x * x;\n};\nsquare(5);", 
            "title": "6.1 Defining a Function"
        }, 
        {
            "location": "/basic_syntax/#62-scope", 
            "text": "", 
            "title": "6.2 Scope"
        }, 
        {
            "location": "/basic_syntax/#scope-is-the-area-where-contains-all-variable-or-function-are-living", 
            "text": "", 
            "title": "Scope is the area where contains all variable or function are living. "
        }, 
        {
            "location": "/basic_syntax/#scope-has-some-rules", 
            "text": "Child Scope can access all variable and function in parent Scope. (E.g: Local Scope can access Global Scope)   function saveName(firstName) {\n    var temp =  temp ;\n    function capitalizeName() {\n        temp = temp +   here ;\n        return firstName.toUpperCase();\n    }\n    var capitalized = capitalizeName();\n    return capitalized;\n}\nalert(saveName( Robert ));   But parent Scope can access variable and function inside children scope (E.g: Global Scope cannot acces to local Scope)   function talkDirty () {\n    var saying =  Oh, you little VB lover, you ;\n    return alert(saying);\n}\nalert(saying); //- Error", 
            "title": "Scope has some rules:"
        }, 
        {
            "location": "/basic_syntax/#63-call-stack", 
            "text": "The storage where computer stores context is called CALL STACK.  // CALL STACK\nfunction greet(who) {\n    console.log( Hello   + who);\n    ask( How are you? );\n    console.log( I'm fine );\n};\n\nfunction ask(question) {\n    console.log( well,   + question);\n};\n\ngreet( Harry );\nconsole.log( Bye );  Out of Call Stack  function chicken() {\n    return egg();\n}\n\nfunction egg() {\n    return chicken();\n}\nconsole.log(chicken() +   came first );", 
            "title": "6.3 Call Stack"
        }, 
        {
            "location": "/basic_syntax/#64-optional-argument", 
            "text": "", 
            "title": "6.4. Optional Argument"
        }, 
        {
            "location": "/basic_syntax/#we-can-pass-too-many-or-too-few-arguments-to-the-function-without-any-syntaxerror", 
            "text": "If we pass too much arguments, the extra ones are ignored  If we pass to few arguments, the missing ones get value undefined   function power(base, exponent) {\n    if (exponent == undefined) {\n        exponent = 2;\n    }\n    var result = 1;\n    for (var count = 0; count   exponent; count++) {\n        result = result * base;\n    }\n    return result;\n}\nconsole.log(power(4)); \nconsole.log(power(4,3));  upside : flexible   downside : hard to control the error", 
            "title": "We can pass too many or too few arguments to the function without any SyntaxError."
        }, 
        {
            "location": "/basic_syntax/#65-closure", 
            "text": "Look at this example:  function sayHello(name){\n    var text = 'Hello' + name;\n    var say = function(){\n        console.log(text);\n    }\n    return say;\n}\nvar say2 = sayHello( ahaha );\nsay2();  if in C program, does say2() work?  \nThe answer is nope! Because in C program, when a function returns, the Stack-flame will be destroyed, and all the local variable such as  text  will undefinded. So, when say2() is called, there is no text anymore, and the error, will be shown!  \nBut, in JavaScript, This code works!! Because, it provides for us an Object called Closure! Closure is borned when we define a function in another function, it keep all the live local variable. So, when say2() is called, the closure will give all the value of local variable outside it, and text will be identity.!  var globalVariable = 10;\nfunction func(){\n    var name =  xxx ;\n    function getName(){\n        return name;\n    }\n    function speak(){\n        var sound =  alo ;\n        function scream(){\n            console.log(globalVariable);\n            console.log(name);\n            return  aaaaaaaaaa! ;\n        }\n        function talk(){\n            var voice = getName() +   speak   + sound;\n            console.log(voice);\n            return voice;\n        }\n        scream();\n        talk();\n    }\n    speak();\n}\nfunc();", 
            "title": "6.5 Closure"
        }, 
        {
            "location": "/basic_syntax/#66-recursion", 
            "text": "Recursion is  function can call itself, as long as it is not overflow  function power(base, exponent){\n    if (exponent == 0){\n        return 1;\n    }\n    else{\n        return base * power(base, exponent -1);\n    } \n}\nconsole.log(power(2,3));\n\nfunction FindSolution(target){\n    function Find(start, history){\n        if (start == target){\n            return history;\n        }\n        else if (start   target){\n            return null;\n        } \n        else{\n            return Find(start + 5,  (  + history +   + 5  ) ||\n            Find(start * 3,  (  + history +   * 3) );\n        }\n    }\n    return Find(1,  1 );\n}\nconsole.log(FindSolution(25));", 
            "title": "6.6. Recursion"
        }, 
        {
            "location": "/basic_syntax/#67-arguments-object", 
            "text": "The arguments object contains all parameters you pass to a function.  function argumentCounter() {\n    console.log( you gave me , arguments.length,  argument. );\n}\nargumentCounter( Straw man ,  Tautology ,  Ad hominem );", 
            "title": "6.7. Arguments object"
        }, 
        {
            "location": "/basic_syntax/#68-higher-order-function", 
            "text": "###Filter array\nvar ancestry = JSON.parse(ANCESTRY_FILE);\nconsole.log(ancestry.length);\n\nfunction filter(array, test) {\n    var passed = [];\n    for (var i = 0; i   array.length; i++){\n        if (test(array[i])){\n            passed.push(array[i]);\n        }\n    }\n    return passed;\n}\nconsole.log(filter(ancestry, function(person){\n    return person.born   1900   person.born   1925;\n}));\n\n### TRANSFORMING WITH A MAP\nfunction map(array, transform) {\n  var mapped = [];\n  for (var i = 0; i   array.length; i++)\n    mapped.push(transform(array[i]));\n  return mapped;\n}\n\nvar overNinety = ancestry.filter(function(person) {\n  return person.died - person.born   90;\n});\nconsole.log(map(overNinety, function(person) {\n  return person.name;\n}));\n\n\n### REDUCE\nfunction reduce(array, combine, start) {\n  var current = start;\n  for (var i = 0; i   array.length; i++)\n    current = combine(current, array[i]);\n  return current;\n}\nconsole.log(reduce([1, 2, 3, 4], function(a, b) {\n  return a + b;\n}, 0));\n#Problem: using map and reduce, transform [1,2,3,4] to [1,2],[3,4]\n\nvar a = [1, 2, 3, 4]\na = _.map(a, function(i){\n    if(i % 2 == 0){\n        return [[],[i]]\n    } else {\n        return [[i], []]\n    }\n});\na = _.reduce(a, function(x, y){\n   return [x[0].concat(y[0]), x[1].concat(y[1])]\n})\n\n\n### BINDING FUNCTION\nvar theSet = [ Carel Haverbeke ,  Maria van Brussel ,\n               Donald Duck ];\nfunction isInSet(set, person) {\n  return set.indexOf(person.name)   -1;\n}\n\nconsole.log(ancestry.filter(function(person) {\n  return isInSet(theSet, person);\n}));\nconsole.log(ancestry.filter(isInSet.bind(null, theSet)));      What's the cleanest way to write a multiline string in JavaScript? [duplicate]    Google JavaScript Style Guide", 
            "title": "6.8. Higher-Order Function"
        }, 
        {
            "location": "/data_number/", 
            "text": "Number\n\n\nSome example of number: \n10, 1.234, 1.99e9, NaN, Infinity, -Infinity\n\n\nconsole.log(2.99e9);\nconsole.log(0 /0);\nconsole.log(1 /0);\nconsole.log(-1 /0);\n\n\n\n\nAutomatic Conversion\n\n\nconsole.log(8 * null); // -\n 0\nconsole.log(\n5\n - 1); // -\n 4\nconsole.log(\n5\n + 1); //-\n 51\nconsole.log(false == 0) //-\n true", 
            "title": "Number"
        }, 
        {
            "location": "/data_number/#number", 
            "text": "Some example of number:  10, 1.234, 1.99e9, NaN, Infinity, -Infinity  console.log(2.99e9);\nconsole.log(0 /0);\nconsole.log(1 /0);\nconsole.log(-1 /0);  Automatic Conversion  console.log(8 * null); // -  0\nconsole.log( 5  - 1); // -  4\nconsole.log( 5  + 1); //-  51\nconsole.log(false == 0) //-  true", 
            "title": "Number"
        }, 
        {
            "location": "/data_string/", 
            "text": "sprintf\n\n\nIn \nindex.html\n\n\nscript src=\ncdnjs.cloudflare.com/ajax/libs/sprintf/1.0.3/sprintf.js\n/\n\n\n\n\n\n\nIn \nscript.js\n\n\n// arguments\nsprintf(\n%1$s %2$s\n, \nhello\n, \nsprintf\n)\n# hello sprintf\n\n// object\nvar user = {\n    name: \nDolly\n\n}\nsprintf(\nHello %(name)s\n, user)\n# Hello Dolly\n\n// array of object\nvar users = [\n    {name: \nDolly\n},\n    {name: \nMolly\n}\n]\nsprintf(\nHello %(users[0].name)s and %(users[1].name)s\n, {users: users})\n# Hello Dolly and Molly\n\n\n\n\nMultiline String\n\n\nstr = \n\\\nline 1\\\nline 2\\\nline 3\n;\n\n\n\n\nRegular Expression in JavaScript\n\n\nThis lab is based on Chapter9: EloquentJavaScript\n\n\nCreating a regular expression\n\n\nThere are 2 ways:\n\n\nvar re1 = new RegExp(\nabc\n);\nvar re2 = /abc/\n\n\n\n\nthere are some special characters such as question mark, or plus sign. If you want to use them, you have to use backslash. Like this:\n\n\nvar eighteen = /eighteen\\+/;\nvar question = /question\\?/;\n\n\n\n\nTesting for match\n\n\nRegular Express has a number of method. Simplest is test\n\n\nconsole.log(/abc/.test(\nabcd\n));\nconsole.log(/abc/.test(\nabxde\n));\n\n\n\n\nMatching a set of character\n\n\n[]\n: Put a set of characters between 2 square bracket\n\n\nconsole.log(/[0123456789]/.test(\n1245\n));\nconsole.log(/[0-9]/.test(\n1\n);\nconsole.log(/[0-9]/.test(\nacd\n);\nconsole.log(/[0-9]/.test(\naaascacas1\n));\n\n\n\n\nThere are some special character: \n\n\n\\d\n  Any digit character (Like [0-9]) \n\n\nvar datetime = /\\d\\d-\\d\\d-\\d\\d\\d\\d\\s\\d\\d:\\d\\d/;\nconsole.log(datetime.test(\n16-06-2016 14:09\n));\nconsole.log(dateTime.test(\n30-jan-2003 15:20\n));\n\n\n\n\n\\w\n  An alphanumeric character (\u201cword character\u201d) \n\n\nvar word = /\\w/;\nconsole.log(word.test(\n@#@#\n));\n\n\n\n\n\\s\n  Any whitespace character (space, tab, newline, and similar) \n\n\nvar space = /\\d\\.\\s+abc/;\nconsole.log(space.test(\n1. abd\n));\nconsole.log(space.test(\n1.     abd\n));\nconsole.log(space.test(\n1.abd\n));\n\n\n\n\n\\D\n  A character that is not a digit \n\n\nvar notDigit = /\\D/;\nconsole.log(notDigit.test(\nww\n));\nconsole.log(notDigit.test(\n1a\n));\nconsole.log(notDigit.test(\n1124\n));\n\n\n\n\n\\W\n  A nonalphanumeric character \n\n\nvar nonAlphanumbericChar = /\\W/;\nconsole.log(nonAlphanumbericChar.test(\nabc12231\n));\nconsole.log(nonAlphanumbericChar.test(\n!@#%{}_\n));\n\n\n\n\n\\S\n  A nonwhitespace character \n\n\nvar nonWhiteSpace = /\\S/;\nconsole.log(nonWhiteSpace.test(\nabc123\n));\nconsole.log(nonWhiteSpace.test(\n1.  abcd\n));\nconsole.log(nonWhiteSpace.test(\n  \n));\n\n\n\n\n\".\"\n Any character except for newline \n\n\nvar anyThing = /...\\./;\nconsole.log(anyThing.test(\nabc.\n));\nconsole.log(anyThing.test(\nacbacd.\n));\nconsole.log(anyThing.test(\nacba\n));\n\n\n\n\n\"^\"\n Using caret character to match any except the ones\n\n\nvar notBinary = /[^01]/;\nconsole.log(notBinary.test(\n01101011100\n));\nconsole.log(notBinary.test(\n01021010010\n));\n\n\n\n\nRepeating parts of Pattern\n\n\nThe square bracket [] above only match 1 digit. How can regex match more than 1 digit? \n\n\n\"+\"\n Match one or more \n\n\n\"*\"\n Match zero or more \n\n\nconsole.log(/\\d+/.test(1234));\nconsole.log(/\\d+/.test());\n\nconsole.log(/\\d*/.test(1234));\nconsole.log(/\\d*/.test())\n\n\n\n\n\"?\"\n Question mark test a character exist or not is still oke\n\n\nvar ball = /bal?l/;\nconsole.log(ball.test(\nball\n));\nconsole.log(ball.test(\nbal\n));\n\n\n\n\n{a,b}\n the character before exist from a to b times. Check datetime:\n\n\nvar datetime = /\\d{1,2}-\\d{1,2}-\\d{4} \\d{1,2}:\\d{1,2}/;\nconsole.log(datetime.test(\n20-12-2015 14:09\n));\n\n\n\n\nvar checkTimes = /waz{3,5}up/;\nconsole.log(checkTimes.test(\nwazzzzzup\n));\nconsole.log(checkTimes.test(\nwazzzup\n));\nconsole.log(checkTimes.test(\nwazup\n));\n\n\n\n\nGrouping Subexpressions\n\n\n()\n using prentheses to make whole group like one character\n\n\nvar cartoonCrying = /boo+(hoo+)+/i; //i to match all Captalize or normal text\nconsole.log(cartoonCrying.test(\nBoohoooohoohooo\n));\nconsole.log(cartoonCrying.test(\nboohoooohooOOO\n));\n\n\n\n\nMatches and group\n\n\nTest is a simplest method, and it only return true or false. \n\n\nexec\n (execute) is anther method in regex. It returns null if no match, and object if match.\n\n\nvar match  = /\\d+/.exec(\none two 100\n);\nconsole.log(match);\nconsole.log(match.input);\nconsole.log(match.index);\n\n\n\n\nif in the expression has a group subexpression, then it will return the text contain this subexpress, and the text match this subexpress:\n\n\nvar quotedText = /'([^']*)'/;\nconsole.log(quotedText.exec(\nshe said 'hello'\n));\n\n\n\n\nand if the subexpression appears one more times, then the result will be displayed the last match one.\n\n\nconsole.log(/bad(ly)?/.exec(\nbad\n));\nconsole.log(/(\\d)+/.exec(\n123\n));\n\n\n\n\nThe date type\n\n\ncreate new Date(). return the current time\n\n\nvar date =  new Date();\nconsole.log(new Date(2009, 11, 9);\nconsole.log(new Date(2009, 11, 9, 23, 59, 61));\n\n!--TimeStamp--\n\nconsole.log(new Date(2009, 11, 9, 23, 59, 61).getTime());\nconsole.log(new Date(1260378001000));\n\n!--getFullYear, getMonth,...--\n\nvar date = new Date();\nconsole.log(date.getFullYear());\nconsole.log(date.getMonth());\nconsole.log(date.getDate());\nconsole.log(date.getHours());\nconsole.log(date.getMinutes());\nconsole.log(date.getSeconds());\n\n\n\n\nWord and string boundaries\n\n\nconsole.log(/cat/.test(\nconcatenate\n));\nconsole.log(/cat/.test(\ncon123cat-129e0enate\n));\nconsole.log(/\\bcat\\b/.test(\nconcatenate\n));\nconsole.log(/\\bcat\\b/.test(\ncon123cat-129e0enate\n));\n\n\n\n\nChoice patterm\n\n\nOnly one in the list beween the \n\"|\"\n match\n\n\nvar animalCount = /\\b\\d+ (pig|cow|chicken)s?\\b/;\nconsole.log(animalCount.test(\n15 pigs\n));\nconsole.log(animalCount.test(\n15 pigchickens\n));\n\n\n\n\nReplace\n\n\nReplace will find the first match and replace.if we want to replace all matches, using \n\"g\"\n behind the expresssion\n\n\nconsole.log(\npapa\n.replace(\np\n, \nm\n));\nconsole.log(\nBorobudur\n.replace(/[ou]/, \na\n));\nconsole.log(\nBorobudur\n.replace(/[ou]/g, \na\n));\n\n\n\n\nReplace can refer back to the matched, and using them\n\n\nconsole.log(\nLe, Khanh\\nNguyen, Hung\\nDuong, Bach\n.replace(/([\\w]+), ([\\w]+)/g, \n$1 $2\n));\n\n\n\n\nGreed\n\n\nfunction stripComments(code) {\n  return code.replace(/\\/\\/.*|\\/\\*[^]*\\*\\//g, \n);\n}\nconsole.log(stripComments(\n1 + /* 2 */3\n));\n// \u2192 1 + 3\nconsole.log(stripComments(\nx = 10;// ten!\n));\n// \u2192 x = 10;\nconsole.log(stripComments(\n1 /* a */+/* b */ 1\n));\n// \u2192 1  1\n\n\n\n\nSearch method\n\n\nSearch method return the first index if the regular expression match. \n\nAnd return -1 if not found\n\n\nconsole.log(\n  word\n.search(/\\S/));\n// \u2192 2\nconsole.log(\n    \n.search(/\\S/));\n// \u2192 -1\n\n\n\n\nThe last index property\n\n\nIn the regular expression has a property is lastIndex. And when this Regex do some method, it will start from the lastIndex. And after doing something, the lastIndex will update to the behind the index of the match exec.\n\n\nvar pattern = /y/g;\npattern.lastIndex = 3; //lastIndex update to 3\nvar match = pattern.exec(\nxyzzy\n); //lastIndex update to 5\nconsole.log(pattern.lastIndex);\n\nmatch = pattern.exec(\nxyzzyxxx\n); //Not match any \ny\n from index 5\nconsole.log(match.index);\nconsole.log(pattern.lastIndex);\n\n\n\n\nLooping Over the Line\n\n\nApplying the hepoloris of lastIndex, we can using while to do something like this:\n\n\nvar input = \nA string with 3 numbers in it... 42 and 88.\n;\nvar number = /\\b(\\d+)\\b/g;\nvar match;\nwhile (match = number.exec(input))\n  console.log(\nFound\n, match[1], \nat\n, match.index);", 
            "title": "String"
        }, 
        {
            "location": "/data_string/#sprintf", 
            "text": "In  index.html  script src= cdnjs.cloudflare.com/ajax/libs/sprintf/1.0.3/sprintf.js /   In  script.js  // arguments\nsprintf( %1$s %2$s ,  hello ,  sprintf )\n# hello sprintf\n\n// object\nvar user = {\n    name:  Dolly \n}\nsprintf( Hello %(name)s , user)\n# Hello Dolly\n\n// array of object\nvar users = [\n    {name:  Dolly },\n    {name:  Molly }\n]\nsprintf( Hello %(users[0].name)s and %(users[1].name)s , {users: users})\n# Hello Dolly and Molly", 
            "title": "sprintf"
        }, 
        {
            "location": "/data_string/#multiline-string", 
            "text": "str =  \\\nline 1\\\nline 2\\\nline 3 ;", 
            "title": "Multiline String"
        }, 
        {
            "location": "/data_string/#regular-expression-in-javascript", 
            "text": "This lab is based on Chapter9: EloquentJavaScript", 
            "title": "Regular Expression in JavaScript"
        }, 
        {
            "location": "/data_string/#creating-a-regular-expression", 
            "text": "There are 2 ways:  var re1 = new RegExp( abc );\nvar re2 = /abc/  there are some special characters such as question mark, or plus sign. If you want to use them, you have to use backslash. Like this:  var eighteen = /eighteen\\+/;\nvar question = /question\\?/;", 
            "title": "Creating a regular expression"
        }, 
        {
            "location": "/data_string/#testing-for-match", 
            "text": "Regular Express has a number of method. Simplest is test  console.log(/abc/.test( abcd ));\nconsole.log(/abc/.test( abxde ));  Matching a set of character  [] : Put a set of characters between 2 square bracket  console.log(/[0123456789]/.test( 1245 ));\nconsole.log(/[0-9]/.test( 1 );\nconsole.log(/[0-9]/.test( acd );\nconsole.log(/[0-9]/.test( aaascacas1 ));  There are some special character:   \\d   Any digit character (Like [0-9])   var datetime = /\\d\\d-\\d\\d-\\d\\d\\d\\d\\s\\d\\d:\\d\\d/;\nconsole.log(datetime.test( 16-06-2016 14:09 ));\nconsole.log(dateTime.test( 30-jan-2003 15:20 ));  \\w   An alphanumeric character (\u201cword character\u201d)   var word = /\\w/;\nconsole.log(word.test( @#@# ));  \\s   Any whitespace character (space, tab, newline, and similar)   var space = /\\d\\.\\s+abc/;\nconsole.log(space.test( 1. abd ));\nconsole.log(space.test( 1.     abd ));\nconsole.log(space.test( 1.abd ));  \\D   A character that is not a digit   var notDigit = /\\D/;\nconsole.log(notDigit.test( ww ));\nconsole.log(notDigit.test( 1a ));\nconsole.log(notDigit.test( 1124 ));  \\W   A nonalphanumeric character   var nonAlphanumbericChar = /\\W/;\nconsole.log(nonAlphanumbericChar.test( abc12231 ));\nconsole.log(nonAlphanumbericChar.test( !@#%{}_ ));  \\S   A nonwhitespace character   var nonWhiteSpace = /\\S/;\nconsole.log(nonWhiteSpace.test( abc123 ));\nconsole.log(nonWhiteSpace.test( 1.  abcd ));\nconsole.log(nonWhiteSpace.test(    ));  \".\"  Any character except for newline   var anyThing = /...\\./;\nconsole.log(anyThing.test( abc. ));\nconsole.log(anyThing.test( acbacd. ));\nconsole.log(anyThing.test( acba ));  \"^\"  Using caret character to match any except the ones  var notBinary = /[^01]/;\nconsole.log(notBinary.test( 01101011100 ));\nconsole.log(notBinary.test( 01021010010 ));", 
            "title": "Testing for match"
        }, 
        {
            "location": "/data_string/#repeating-parts-of-pattern", 
            "text": "The square bracket [] above only match 1 digit. How can regex match more than 1 digit?   \"+\"  Match one or more   \"*\"  Match zero or more   console.log(/\\d+/.test(1234));\nconsole.log(/\\d+/.test());\n\nconsole.log(/\\d*/.test(1234));\nconsole.log(/\\d*/.test())  \"?\"  Question mark test a character exist or not is still oke  var ball = /bal?l/;\nconsole.log(ball.test( ball ));\nconsole.log(ball.test( bal ));  {a,b}  the character before exist from a to b times. Check datetime:  var datetime = /\\d{1,2}-\\d{1,2}-\\d{4} \\d{1,2}:\\d{1,2}/;\nconsole.log(datetime.test( 20-12-2015 14:09 ));  var checkTimes = /waz{3,5}up/;\nconsole.log(checkTimes.test( wazzzzzup ));\nconsole.log(checkTimes.test( wazzzup ));\nconsole.log(checkTimes.test( wazup ));", 
            "title": "Repeating parts of Pattern"
        }, 
        {
            "location": "/data_string/#grouping-subexpressions", 
            "text": "()  using prentheses to make whole group like one character  var cartoonCrying = /boo+(hoo+)+/i; //i to match all Captalize or normal text\nconsole.log(cartoonCrying.test( Boohoooohoohooo ));\nconsole.log(cartoonCrying.test( boohoooohooOOO ));", 
            "title": "Grouping Subexpressions"
        }, 
        {
            "location": "/data_string/#matches-and-group", 
            "text": "Test is a simplest method, and it only return true or false.   exec  (execute) is anther method in regex. It returns null if no match, and object if match.  var match  = /\\d+/.exec( one two 100 );\nconsole.log(match);\nconsole.log(match.input);\nconsole.log(match.index);  if in the expression has a group subexpression, then it will return the text contain this subexpress, and the text match this subexpress:  var quotedText = /'([^']*)'/;\nconsole.log(quotedText.exec( she said 'hello' ));  and if the subexpression appears one more times, then the result will be displayed the last match one.  console.log(/bad(ly)?/.exec( bad ));\nconsole.log(/(\\d)+/.exec( 123 ));", 
            "title": "Matches and group"
        }, 
        {
            "location": "/data_string/#the-date-type", 
            "text": "create new Date(). return the current time  var date =  new Date();\nconsole.log(new Date(2009, 11, 9);\nconsole.log(new Date(2009, 11, 9, 23, 59, 61)); !--TimeStamp-- \nconsole.log(new Date(2009, 11, 9, 23, 59, 61).getTime());\nconsole.log(new Date(1260378001000)); !--getFullYear, getMonth,...-- \nvar date = new Date();\nconsole.log(date.getFullYear());\nconsole.log(date.getMonth());\nconsole.log(date.getDate());\nconsole.log(date.getHours());\nconsole.log(date.getMinutes());\nconsole.log(date.getSeconds());", 
            "title": "The date type"
        }, 
        {
            "location": "/data_string/#word-and-string-boundaries", 
            "text": "console.log(/cat/.test( concatenate ));\nconsole.log(/cat/.test( con123cat-129e0enate ));\nconsole.log(/\\bcat\\b/.test( concatenate ));\nconsole.log(/\\bcat\\b/.test( con123cat-129e0enate ));", 
            "title": "Word and string boundaries"
        }, 
        {
            "location": "/data_string/#choice-patterm", 
            "text": "Only one in the list beween the  \"|\"  match  var animalCount = /\\b\\d+ (pig|cow|chicken)s?\\b/;\nconsole.log(animalCount.test( 15 pigs ));\nconsole.log(animalCount.test( 15 pigchickens ));", 
            "title": "Choice patterm"
        }, 
        {
            "location": "/data_string/#replace", 
            "text": "Replace will find the first match and replace.if we want to replace all matches, using  \"g\"  behind the expresssion  console.log( papa .replace( p ,  m ));\nconsole.log( Borobudur .replace(/[ou]/,  a ));\nconsole.log( Borobudur .replace(/[ou]/g,  a ));  Replace can refer back to the matched, and using them  console.log( Le, Khanh\\nNguyen, Hung\\nDuong, Bach .replace(/([\\w]+), ([\\w]+)/g,  $1 $2 ));", 
            "title": "Replace"
        }, 
        {
            "location": "/data_string/#greed", 
            "text": "function stripComments(code) {\n  return code.replace(/\\/\\/.*|\\/\\*[^]*\\*\\//g,  );\n}\nconsole.log(stripComments( 1 + /* 2 */3 ));\n// \u2192 1 + 3\nconsole.log(stripComments( x = 10;// ten! ));\n// \u2192 x = 10;\nconsole.log(stripComments( 1 /* a */+/* b */ 1 ));\n// \u2192 1  1", 
            "title": "Greed"
        }, 
        {
            "location": "/data_string/#search-method", 
            "text": "Search method return the first index if the regular expression match.  \nAnd return -1 if not found  console.log(   word .search(/\\S/));\n// \u2192 2\nconsole.log(      .search(/\\S/));\n// \u2192 -1", 
            "title": "Search method"
        }, 
        {
            "location": "/data_string/#the-last-index-property", 
            "text": "In the regular expression has a property is lastIndex. And when this Regex do some method, it will start from the lastIndex. And after doing something, the lastIndex will update to the behind the index of the match exec.  var pattern = /y/g;\npattern.lastIndex = 3; //lastIndex update to 3\nvar match = pattern.exec( xyzzy ); //lastIndex update to 5\nconsole.log(pattern.lastIndex);\n\nmatch = pattern.exec( xyzzyxxx ); //Not match any  y  from index 5\nconsole.log(match.index);\nconsole.log(pattern.lastIndex);", 
            "title": "The last index property"
        }, 
        {
            "location": "/data_string/#looping-over-the-line", 
            "text": "Applying the hepoloris of lastIndex, we can using while to do something like this:  var input =  A string with 3 numbers in it... 42 and 88. ;\nvar number = /\\b(\\d+)\\b/g;\nvar match;\nwhile (match = number.exec(input))\n  console.log( Found , match[1],  at , match.index);", 
            "title": "Looping Over the Line"
        }, 
        {
            "location": "/data_collection/", 
            "text": "Collection\n\n\nSome useful methods with array\n\n\n\n\npush and pop\n\n\n\n\nvar a = [1,2,3,4];\nconsole.log(a.pop(), a);\nconsole.log(a.push(3), a);\n\n\n\n\n\n\nshift and unshift\n\n\n\n\nconsole.log(a.shift(), a);\nconsole.log(a.unshift(1), a);\n\n\n\n\n\n\nindexOf and lastIndexOf\n\n\n\n\nvar b = [1,2,3,4,2,3,1];\nconsole.log(b.indexOf(1));\nconsole.log(b.lastIndexOf(1));\n\n\n\n\n\n\nslice\n\n\n\n\nconsole.log([0,1,2,3,4].slice(2,4));\nconsole.log([0,1,2,3,4].slice(2));\n\n\n\n\n\n\nconcat\n\n\n\n\nvar a = [1,2,3];\nvar b = [4,5,6];\na.concat(b);\nconsole.log(a);", 
            "title": "Collection"
        }, 
        {
            "location": "/data_collection/#collection", 
            "text": "", 
            "title": "Collection"
        }, 
        {
            "location": "/data_collection/#some-useful-methods-with-array", 
            "text": "push and pop   var a = [1,2,3,4];\nconsole.log(a.pop(), a);\nconsole.log(a.push(3), a);   shift and unshift   console.log(a.shift(), a);\nconsole.log(a.unshift(1), a);   indexOf and lastIndexOf   var b = [1,2,3,4,2,3,1];\nconsole.log(b.indexOf(1));\nconsole.log(b.lastIndexOf(1));   slice   console.log([0,1,2,3,4].slice(2,4));\nconsole.log([0,1,2,3,4].slice(2));   concat   var a = [1,2,3];\nvar b = [4,5,6];\na.concat(b);\nconsole.log(a);", 
            "title": "Some useful methods with array"
        }, 
        {
            "location": "/data_time/", 
            "text": "moment.js \n1\n\n\nCurrent Time\n\n\nmoment().format('MMMM Do YYYY, h:mm:ss a');\n\n\n\n\n\n\n\n\n\n\n\n\nMoment.js", 
            "title": "Datetime"
        }, 
        {
            "location": "/data_time/#current-time", 
            "text": "moment().format('MMMM Do YYYY, h:mm:ss a');      Moment.js", 
            "title": "Current Time"
        }, 
        {
            "location": "/data_boolean/", 
            "text": "Boolean\n\n\nBoolean has only 2 values: true and false\n\n\nconsole.log(\nAbc\n \n \nAbcd\n) // -\n true\nconsole.log(\nabc\n \n \nAbcd\n) // -\n false\nconsole.log(\n123\n == \n123\n) // -\n true\nconsole.log(NaN == NaN) // -\n false\n\n\n\n\nwhat is the different?\n\n\nconsole.log(\n5\n == 5);\nconsole.log(\n5\n === 5);", 
            "title": "Boolean"
        }, 
        {
            "location": "/data_boolean/#boolean", 
            "text": "Boolean has only 2 values: true and false  console.log( Abc     Abcd ) // -  true\nconsole.log( abc     Abcd ) // -  false\nconsole.log( 123  ==  123 ) // -  true\nconsole.log(NaN == NaN) // -  false  what is the different?  console.log( 5  == 5);\nconsole.log( 5  === 5);", 
            "title": "Boolean"
        }, 
        {
            "location": "/data_object/", 
            "text": "Object\n\n\nDefine an object\n\n\nvar object = {\n  number: 10,\n  string: \nstring\n,\n  array: [1,2,3],\n  object: {a: 1, b: 2}\n}\n\n\n\n\nAdd new property to object\n\n\nobject.newProperty = \nvalue\n;\nobject['key'] = 'value';\n\n\n\n\ndelete property\n\n\ndelete object.newProperty;\n\n\n\n\nWindow object (global object)\n\n\nThe Global scope is stored in an object which called window\n\n\nfunction test(){\n    var local = 10;\n    console.log(\nlocal\n in window);\n    console.log(window.local);\n}\ntest();\nvar global = 10;\nconsole.log(\nglobal\n in window);\nconsole.log(window.global);", 
            "title": "Object"
        }, 
        {
            "location": "/data_object/#object", 
            "text": "", 
            "title": "Object"
        }, 
        {
            "location": "/data_object/#define-an-object", 
            "text": "var object = {\n  number: 10,\n  string:  string ,\n  array: [1,2,3],\n  object: {a: 1, b: 2}\n}", 
            "title": "Define an object"
        }, 
        {
            "location": "/data_object/#add-new-property-to-object", 
            "text": "object.newProperty =  value ;\nobject['key'] = 'value';", 
            "title": "Add new property to object"
        }, 
        {
            "location": "/data_object/#delete-property", 
            "text": "delete object.newProperty;", 
            "title": "delete property"
        }, 
        {
            "location": "/data_object/#window-object-global-object", 
            "text": "The Global scope is stored in an object which called window  function test(){\n    var local = 10;\n    console.log( local  in window);\n    console.log(window.local);\n}\ntest();\nvar global = 10;\nconsole.log( global  in window);\nconsole.log(window.global);", 
            "title": "Window object (global object)"
        }, 
        {
            "location": "/oop/", 
            "text": "1. Classes and Objects\n\n\nConstructor\n\n\nfunction Ball(position){\n    this.position = position;\n    this.display = function(){\n        console.log(this.position[0], \n, \n, this.position[1]);\n    }\n}\n\nball = new Ball([2, 3]);\nball.display();\n\n\n\n\n2. Inheritance\n\n\nPerson = function (name, birthday, job) {\n  this.name = name;\n  this.birthday = birthday;\n  this.job = job;\n};\n\nPerson.prototype.display = function () {\n  console.log(this.name, \n\\n\n);\n  console.log(this.birthday, \n\\n\n);\n  console.log(this.job, \n\\n\n);\n};\n\nPolitician = function (name, birthday) {\n  Person.call(this, name, birthday, \nPolitician\n);\n};\nPolitician.prototype = Object.create(Person.prototype);\nPolitician.prototype.constructor = Politician;\n\nvar person1 = new Person(\nBarack Obama\n, \n04/08/1961\n, \nPolitician\n);\nvar person2 = new Politician(\nDavid Cameron\n, \n09/10/1966\n);\nperson1.display();\nperson2.display();\n\n\n\n\n\nObject-Oriented Programming\n\n\nvar rabbit = {};\nrabbit.speak = function(line){\nconsole.log(\nThe rabit says:'\n + line + \n'\n);\n };\nrabbit.speak(\nI'm alive\n);\n\nfunction speak(line){\n   console.log(\nThe \n+ this.type + \n rabbit says '\n + line + \n'\n);\n }\n\nvar whiteRabbit = {type: \nwhite\n, speak: speak};\nvar fatRabbit = {type: \nfat\n, speak: speak};\nwhiteRabbit.speak(\nOh my ears and whiskers, \n + \nhow late it's getting!\n);\nfatRabbit.speak(\nI could sure use a carrot right now\n);\n\n// Prototype\n// Prototype is another object that is used as a fallback source of properties\n// When object request a property that it does not have, its prototype will be searched for the property\nvar empty = {};\nconsole.log(empty.toString);\nconsole.log(empty.toString);\n\n// Get prototype of an object 2 ways:\nconsole.log(Object.getPrototypeOf({}) == Object.prototype);\nconsole.log(Object.getPrototypeOf(Object.prototype));\n\n// Using Object.create to create an object with an specific prototype\nvar protoRabbit = {\n  speak: function(line){\n    console.log(\nThe \n + this.type + \n rabbit says '\n + line + \n'\n);\n  }\n};\n\nvar killerRabbit = Object.create(protoRabbit);\nkillerRabbit.type = \nKiller\n;\nkillerRabbit.speak(\nSkreeee!\n);\n\n// Constructor\nfunction Rabbit(type){\n   this.type = type;\n}\nvar killerRabbit = new Rabbit(\nKiller\n);\nvar blackRabbit = new Rabbit(\nblack\n);\nconsole.log(blackRabbit.type);\n\n// using prototype to add a new method\nRabbit.prototype.speak = function(line) {\n  console.log(\nThe \n + this.type + \n rabit says '\n + line + \n'\n);\n};\nblackRabbit.speak(\nDoom...\n);\n\n\n// OVERRIDING DERIVED PROPERTIES\nRabbit.prototype.teeth = \nsmall\n;\nconsole.log(killerRabbit.teeth);\n\nkillerRabbit.teeth = \nLong, sharp, and bloody\n;\nconsole.log(killerRabbit.teeth);\nconsole.log(blackRabbit.teeth);\nconsole.log(Rabbit.prototype.teeth);\n\n// PROTOTYPE INTERFERENCE\n// A prototype can be used at any time to add methods, properties\n// to all objects based on it\nRabbit.prototype.dance = function (){\n  console.log(\nThe \n + this.type + \n rabbit dances a jig\n);\n};\nkillerRabbit.dance();\n// but there is a problem:\nvar map = {};\nfunction storePhi(event, phi){\n   map[event] = phi;\n}\n\nstorePhi(\npizza\n, 0.069);\nstorePhi(\ntouched tree\n, -0.081);\nconsole.log(map);\n\nObject.prototype.nonsense = \nhi\n;\nfor (var name in map) {\n  console.log(name);\n}\nconsole.log(\nnonsense\n in map);\nconsole.log(\ntoString\n in map);\ndelete Object.prototype.nonsense;\n//  we can use Object.defineProperty to solve it\nObject.defineProperty(Object.prototype, \nhiddenNonsense\n, {\n   enumerable: false,\n   value: \nhi\n\n});\n\nfor (var name in map) {\n  console.log(name);\n}\nconsole.log(map.hiddenNonsense);\n// but there still has a problem\nconsole.log(\ntoString\n in map);\nconsole.log(map.hasOwnProperty(\ntoString\n));\n\n// PROTOTYPE-LESS OBJECTS\n// if we only want to create an fresh object, without prototype then we tranform null to create\nvar map = Object.create(null);\nmap[\npizza\n] = 0.09;\nconsole.log(\ntoString\n in map);\nconsole.log(\npizza\n in map);\n\n// POLYMORPHISM\n// laying out a table: example for polymorphism\nfunction rowHeights(rows) {\n    return rows.map(function(row){\n        return row.reduce(function(max, cell) {\n            return Math.max(max, cell.minHeight());\n        }, 0);\n    });\n}\n\nfunction colWidths(rows) {\n    return rows[0].map(function(_, i) {\n        return rows.reduce(function(max, row){\n            return Math.max(max, row[i].minWidth());\n        }, 0);\n    });\n}\n\nfunction drawTable(rows) {\n    var heights = rowHeights(rows);\n    var widths = colWidths(rows);\n\n    function drawLine(blocks, lineNo) {\n        return blocks.map(function(block) {\n            return block[lineNo];\n        }).join(\n \n);\n    }\n\n    function drawRow(row, rowNum){\n        var blocks = row.map(function(cell, colNum) {\n           return cell.draw(widths[colNum], heights[rowNum]);\n        });\n        return blocks[0].map(function(_, lineNo) {\n            return drawLine(blocks, lineNo);\n        }).join(\n\\n\n);\n    }\n\n    return rows.map(drawRow).join(\n\\n\n);\n}\n\nfunction repeat(string, times){\n    var result = \n;\n    for (var i = 0; i \n times; i++){\n        result += string;\n    }\n    return result;\n}\n\nfunction TextCell(text){\n    this.text = text.split(\n\\n\n);\n}\nTextCell.prototype.minWidth = function(){\n    return this.text.reduce(function(width, line){\n        return Math.max(width, line.lenght);\n    }, 0);\n};\nTextCell.prototype.minHeight = function(){\n    return this.text.length;\n}\nTextCell.prototype.minHeight = function(){\n    return this.text.lenght;\n}\nTextCell.prototype.minHeight = function(){\n    return this.text.length;\n}\nTextCell.prototype.draw = function(width, height){\n    var result = [];\n    for (var i = 0; i \n height; i++){\n        var line = this.text[i] || \n;\n        result.push(line + repeat(\n \n, width - line.length));\n    }\n    return result;\n}\n\nvar rows = [];\nfor (var i = 0; i \n 5; i++){\n    var row = [];\n    for (var j = 0; j \n 5; j++){\n        if ((i + j) % 2 == 0){\n            row.push(new TextCell(\n1234\n));\n        } else{\n            row.push(new TextCell(\n5\n));\n        }\n    }\n    rows.push(row);\n}\nconsole.log(drawTable(rows));\n\n// // GETTERS AND SETTERS\n// var pile = {\n//     elements: [\neggshell\n, \norange peel\n, \nworm\n],\n//     get height(){\n//         return this.elements.length;\n//     },\n//     set height(value) {\n//         console.log(\nIgnoring attemp to set high to \n, value);\n//     }\n// };\n\n// console.log(pile.height);\n// pile.height = 100;\n// console.log(pile.height);\n\n\n\n\n\n[1]: \nIntroduction to Object-Oriented JavaScript\n\n[2]: \nHow to call parent constructor?", 
            "title": "OOP"
        }, 
        {
            "location": "/oop/#1-classes-and-objects", 
            "text": "", 
            "title": "1. Classes and Objects"
        }, 
        {
            "location": "/oop/#constructor", 
            "text": "function Ball(position){\n    this.position = position;\n    this.display = function(){\n        console.log(this.position[0],  ,  , this.position[1]);\n    }\n}\n\nball = new Ball([2, 3]);\nball.display();", 
            "title": "Constructor"
        }, 
        {
            "location": "/oop/#2-inheritance", 
            "text": "Person = function (name, birthday, job) {\n  this.name = name;\n  this.birthday = birthday;\n  this.job = job;\n};\n\nPerson.prototype.display = function () {\n  console.log(this.name,  \\n );\n  console.log(this.birthday,  \\n );\n  console.log(this.job,  \\n );\n};\n\nPolitician = function (name, birthday) {\n  Person.call(this, name, birthday,  Politician );\n};\nPolitician.prototype = Object.create(Person.prototype);\nPolitician.prototype.constructor = Politician;\n\nvar person1 = new Person( Barack Obama ,  04/08/1961 ,  Politician );\nvar person2 = new Politician( David Cameron ,  09/10/1966 );\nperson1.display();\nperson2.display();", 
            "title": "2. Inheritance"
        }, 
        {
            "location": "/oop/#object-oriented-programming", 
            "text": "var rabbit = {};\nrabbit.speak = function(line){\nconsole.log( The rabit says:'  + line +  ' );\n };\nrabbit.speak( I'm alive );\n\nfunction speak(line){\n   console.log( The  + this.type +   rabbit says '  + line +  ' );\n }\n\nvar whiteRabbit = {type:  white , speak: speak};\nvar fatRabbit = {type:  fat , speak: speak};\nwhiteRabbit.speak( Oh my ears and whiskers,   +  how late it's getting! );\nfatRabbit.speak( I could sure use a carrot right now );\n\n// Prototype\n// Prototype is another object that is used as a fallback source of properties\n// When object request a property that it does not have, its prototype will be searched for the property\nvar empty = {};\nconsole.log(empty.toString);\nconsole.log(empty.toString);\n\n// Get prototype of an object 2 ways:\nconsole.log(Object.getPrototypeOf({}) == Object.prototype);\nconsole.log(Object.getPrototypeOf(Object.prototype));\n\n// Using Object.create to create an object with an specific prototype\nvar protoRabbit = {\n  speak: function(line){\n    console.log( The   + this.type +   rabbit says '  + line +  ' );\n  }\n};\n\nvar killerRabbit = Object.create(protoRabbit);\nkillerRabbit.type =  Killer ;\nkillerRabbit.speak( Skreeee! );\n\n// Constructor\nfunction Rabbit(type){\n   this.type = type;\n}\nvar killerRabbit = new Rabbit( Killer );\nvar blackRabbit = new Rabbit( black );\nconsole.log(blackRabbit.type);\n\n// using prototype to add a new method\nRabbit.prototype.speak = function(line) {\n  console.log( The   + this.type +   rabit says '  + line +  ' );\n};\nblackRabbit.speak( Doom... );\n\n\n// OVERRIDING DERIVED PROPERTIES\nRabbit.prototype.teeth =  small ;\nconsole.log(killerRabbit.teeth);\n\nkillerRabbit.teeth =  Long, sharp, and bloody ;\nconsole.log(killerRabbit.teeth);\nconsole.log(blackRabbit.teeth);\nconsole.log(Rabbit.prototype.teeth);\n\n// PROTOTYPE INTERFERENCE\n// A prototype can be used at any time to add methods, properties\n// to all objects based on it\nRabbit.prototype.dance = function (){\n  console.log( The   + this.type +   rabbit dances a jig );\n};\nkillerRabbit.dance();\n// but there is a problem:\nvar map = {};\nfunction storePhi(event, phi){\n   map[event] = phi;\n}\n\nstorePhi( pizza , 0.069);\nstorePhi( touched tree , -0.081);\nconsole.log(map);\n\nObject.prototype.nonsense =  hi ;\nfor (var name in map) {\n  console.log(name);\n}\nconsole.log( nonsense  in map);\nconsole.log( toString  in map);\ndelete Object.prototype.nonsense;\n//  we can use Object.defineProperty to solve it\nObject.defineProperty(Object.prototype,  hiddenNonsense , {\n   enumerable: false,\n   value:  hi \n});\n\nfor (var name in map) {\n  console.log(name);\n}\nconsole.log(map.hiddenNonsense);\n// but there still has a problem\nconsole.log( toString  in map);\nconsole.log(map.hasOwnProperty( toString ));\n\n// PROTOTYPE-LESS OBJECTS\n// if we only want to create an fresh object, without prototype then we tranform null to create\nvar map = Object.create(null);\nmap[ pizza ] = 0.09;\nconsole.log( toString  in map);\nconsole.log( pizza  in map);\n\n// POLYMORPHISM\n// laying out a table: example for polymorphism\nfunction rowHeights(rows) {\n    return rows.map(function(row){\n        return row.reduce(function(max, cell) {\n            return Math.max(max, cell.minHeight());\n        }, 0);\n    });\n}\n\nfunction colWidths(rows) {\n    return rows[0].map(function(_, i) {\n        return rows.reduce(function(max, row){\n            return Math.max(max, row[i].minWidth());\n        }, 0);\n    });\n}\n\nfunction drawTable(rows) {\n    var heights = rowHeights(rows);\n    var widths = colWidths(rows);\n\n    function drawLine(blocks, lineNo) {\n        return blocks.map(function(block) {\n            return block[lineNo];\n        }).join(   );\n    }\n\n    function drawRow(row, rowNum){\n        var blocks = row.map(function(cell, colNum) {\n           return cell.draw(widths[colNum], heights[rowNum]);\n        });\n        return blocks[0].map(function(_, lineNo) {\n            return drawLine(blocks, lineNo);\n        }).join( \\n );\n    }\n\n    return rows.map(drawRow).join( \\n );\n}\n\nfunction repeat(string, times){\n    var result =  ;\n    for (var i = 0; i   times; i++){\n        result += string;\n    }\n    return result;\n}\n\nfunction TextCell(text){\n    this.text = text.split( \\n );\n}\nTextCell.prototype.minWidth = function(){\n    return this.text.reduce(function(width, line){\n        return Math.max(width, line.lenght);\n    }, 0);\n};\nTextCell.prototype.minHeight = function(){\n    return this.text.length;\n}\nTextCell.prototype.minHeight = function(){\n    return this.text.lenght;\n}\nTextCell.prototype.minHeight = function(){\n    return this.text.length;\n}\nTextCell.prototype.draw = function(width, height){\n    var result = [];\n    for (var i = 0; i   height; i++){\n        var line = this.text[i] ||  ;\n        result.push(line + repeat(   , width - line.length));\n    }\n    return result;\n}\n\nvar rows = [];\nfor (var i = 0; i   5; i++){\n    var row = [];\n    for (var j = 0; j   5; j++){\n        if ((i + j) % 2 == 0){\n            row.push(new TextCell( 1234 ));\n        } else{\n            row.push(new TextCell( 5 ));\n        }\n    }\n    rows.push(row);\n}\nconsole.log(drawTable(rows));\n\n// // GETTERS AND SETTERS\n// var pile = {\n//     elements: [ eggshell ,  orange peel ,  worm ],\n//     get height(){\n//         return this.elements.length;\n//     },\n//     set height(value) {\n//         console.log( Ignoring attemp to set high to  , value);\n//     }\n// };\n\n// console.log(pile.height);\n// pile.height = 100;\n// console.log(pile.height);  [1]:  Introduction to Object-Oriented JavaScript \n[2]:  How to call parent constructor?", 
            "title": "Object-Oriented Programming"
        }, 
        {
            "location": "/networking/", 
            "text": "REST\n\n\nPOST\n\n\n$.ajax({\n  type: \nPOST\n,\n  url: \nhttp://service.com/items\n,\n  data: JSON.stringify({\nname\n: \nnew item\n}),\n  contentType: 'application/json'\n}).done(function (data) {\n  console.log(data)\n}).fail(function () {\n});", 
            "title": "Networking"
        }, 
        {
            "location": "/networking/#rest", 
            "text": "", 
            "title": "REST"
        }, 
        {
            "location": "/networking/#post", 
            "text": "$.ajax({\n  type:  POST ,\n  url:  http://service.com/items ,\n  data: JSON.stringify({ name :  new item }),\n  contentType: 'application/json'\n}).done(function (data) {\n  console.log(data)\n}).fail(function () {\n});", 
            "title": "POST"
        }, 
        {
            "location": "/logging/", 
            "text": "Javascript Logging\n\n\nHaving a fancy JavaScript debugger is great, but sometimes the fastest way to find bugs is just to dump as much\ninformation to the \nconsole\n as you can.\n\n\nconsole.log\nconsole.assert\nconsole.error", 
            "title": "Logging"
        }, 
        {
            "location": "/logging/#javascript-logging", 
            "text": "Having a fancy JavaScript debugger is great, but sometimes the fastest way to find bugs is just to dump as much\ninformation to the  console  as you can.  console.log\nconsole.assert\nconsole.error", 
            "title": "Javascript Logging"
        }, 
        {
            "location": "/documentation/", 
            "text": "Components\n\n\njsdoc\n (with \ndocdash\n template)\n\n\nJSDoc is an API documentation generator for JavaScript, similar to JavaDoc or PHPDoc. You add documentation comments directly to your source code, right along side the code itself. The JSDoc Tool will scan your source code, and generate a complete HTML documentation website for you.\n\n\ngulp\n, \nPyCharm\n\n\nUsage\n\n\nStep 1. Install \ngulp-jsdoc\n\n\nnpm install --save-dev gulp gulp-jsdoc docdash\n\n\n\n\nStep 2. Create \ndocumentation\n task\n\n\nCreate \ndocumentation\n task in \ngulpfile.js\n file\n\n\nvar template = {\n  \npath\n: \n./node_modules/docdash\n\n};\n\ngulp.task('docs', function(){\n  return gulp.src(\n./src/*.js\n)\n    .pipe(jsdoc('./docs', template));\n});\n\n\n\n\nStep 3. Refresh \nGulp\n tasks\n\n\nIn pycharm, click to refresh button in \ngulp\n window.\n\n\nStep 4. Add comment to your code\n\n\nAdd comment to your code, You can see an \nexample: should.js\n\n\n/**\n * Simple utility function for a bit more easier should assertion\n * extension\n * @param {Function} f So called plugin function. It should accept\n * 2 arguments: `should` function and `Assertion` constructor\n * @memberOf should\n * @returns {Function} Returns `should` function\n * @static\n * @example\n *\n * should.use(function(should, Assertion) {\n *   Assertion.add('asset', function() {\n *      this.params = { operator: 'to be asset' };\n *\n *      this.obj.should.have.property('id').which.is.a.Number();\n *      this.obj.should.have.property('path');\n *  })\n * })\n */\nshould.use = function(f) {\n  f(should, should.Assertion);\n  return this;\n};\n\n\n\n\n\nTypes\n: \nboolean\n, \nstring\n, \nnumber\n, \nArray\n (\nsee more\n)\n\n\nStep 5. Run \ndocs\n task\n\n\nIn pycharm, click to \ndocs\n task in \ngulp\n window.", 
            "title": "Documentation"
        }, 
        {
            "location": "/documentation/#components", 
            "text": "jsdoc  (with  docdash  template)  JSDoc is an API documentation generator for JavaScript, similar to JavaDoc or PHPDoc. You add documentation comments directly to your source code, right along side the code itself. The JSDoc Tool will scan your source code, and generate a complete HTML documentation website for you.  gulp ,  PyCharm", 
            "title": "Components"
        }, 
        {
            "location": "/documentation/#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/documentation/#step-1-install-gulp-jsdoc", 
            "text": "npm install --save-dev gulp gulp-jsdoc docdash", 
            "title": "Step 1. Install gulp-jsdoc"
        }, 
        {
            "location": "/documentation/#step-2-create-documentation-task", 
            "text": "Create  documentation  task in  gulpfile.js  file  var template = {\n   path :  ./node_modules/docdash \n};\n\ngulp.task('docs', function(){\n  return gulp.src( ./src/*.js )\n    .pipe(jsdoc('./docs', template));\n});", 
            "title": "Step 2. Create documentation task"
        }, 
        {
            "location": "/documentation/#step-3-refresh-gulp-tasks", 
            "text": "In pycharm, click to refresh button in  gulp  window.", 
            "title": "Step 3. Refresh Gulp tasks"
        }, 
        {
            "location": "/documentation/#step-4-add-comment-to-your-code", 
            "text": "Add comment to your code, You can see an  example: should.js  /**\n * Simple utility function for a bit more easier should assertion\n * extension\n * @param {Function} f So called plugin function. It should accept\n * 2 arguments: `should` function and `Assertion` constructor\n * @memberOf should\n * @returns {Function} Returns `should` function\n * @static\n * @example\n *\n * should.use(function(should, Assertion) {\n *   Assertion.add('asset', function() {\n *      this.params = { operator: 'to be asset' };\n *\n *      this.obj.should.have.property('id').which.is.a.Number();\n *      this.obj.should.have.property('path');\n *  })\n * })\n */\nshould.use = function(f) {\n  f(should, should.Assertion);\n  return this;\n};  Types :  boolean ,  string ,  number ,  Array  ( see more )", 
            "title": "Step 4. Add comment to your code"
        }, 
        {
            "location": "/documentation/#step-5-run-docs-task", 
            "text": "In pycharm, click to  docs  task in  gulp  window.", 
            "title": "Step 5. Run docs task"
        }, 
        {
            "location": "/error_handling/", 
            "text": "In javascript bugs may be displayed is \nNaN\n or \nunderfined\n and program still run but after that, the wrong value can cause some mistake when we use it\nSo, finding bugs and fix them is the quiet hard work in javascript But we can do, and this job is called debugging\n\n\nSTRICT MODE\n\n\nThis is the way to find errors that javascript ignores.\nExample is using an undefined variable. if we dont use strick mode, then everything will be ok, but if using, the error will be shown\n\n\nfunction SpotProblem(){\n//     \nuse strict\n;\n    for (counter = 0; counter \n 10; counter++){\n        console.log(\nGood!\n);\n    }\n}\nSpotProblem();\nconsole.log(counter);\n\n\n\n\nstrick mode can find error when using this in local, but it is still in global.\nExample: When we forget to declare the key word \"new\" when create an new Object\n\n\nuse strict\n;\nfunction Person(name){\n    this.name = name;\n}\nvar john = Person(\nJohn\n);\nconsole.log(name);\n\n\n\n\nAnd there are another cases, that trick mode is not allowed:\n\nDelete an object is not allowed\n\n\nuse strict\n;\nvar x = 3.14;\ndelete x;\n\n\nuse strict\n;\nvar obj = {v1: 3, v2: 4};\ndelete pbj;\n\n\nuse strict\n;\nvar func = function(){};\ndelete func;\n\n\n\n\nDuplicate parameter is not allowed\n\n\nuse strict\n;\nvar func = function(a1, a1){\n    console.log(a1);\n}\n\n\n\n\nReserve Word is not allowed to name variable\n\n\nuse strict\n;\nvar arguments = 5;\nvar eval = 6;\nconsole.log(arguments);\nconsole.log(eval);\n\n\n\n\nTESTING\n\n\nTesting makes sure that the program working well, and if there are any changes, testing will automatic show us the error, thus, we know where need to fix\n\n\nfunction Vector(x, y){\n    this.x = x;\n    this.y = y;\n}\nVector.prototype.plus = function(other){\n    return new Vector(this.x + other.x, this.y + other.y);\n}\n\nfunction TestVector(){\n    var p1 = new Vector(10, 20);\n    var p2 = new Vector(-10, 5);\n    var p3 = p1.plus(p2);\n\n    if (p1.x !== 10) return \nfail: x property\n;\n    if (p1.y !== 20) return \nfail: y property\n;\n    if (p2.x !== -10) return \nfail: nagative x property\n;\n    if (p2.y !== 5) return \nfail: y property\n;\n    if (p3.x !== 0) return \nfail: x property from plus\n;\n    if (p3.y !== 25) return \nfail: y property from plus\n;\n    return \nVector is Oke\n;\n}\nTestVector();\n\n\n\n\nDEBUGGING\n\n\nwhen the testing is fail, we have to debug to find the bugs. \n\nThe first we should guess the bug. And then we put break point in the line, we assume it make bug \n\nIf that is the exactly bug we want to find, then we fix it, and write more test for this case \n\nIn this example code below, the function convert the number in the decima to another. we run and see the result is wrong, so we guess that the error may be caused by the result variable, then we put break point in the line contains result variable.\n\n\nfunction ConvertNumber(n, base) {\n  var result = \n, sign = \n;\n  if (n \n 0) {\n    sign = \n-\n;\n    n = -n;\n  }\n  do {\n    result = String(n % base) + result;\n    n /= base; //-\n n = Math.floor(n / base);\n  } while (n \n 0);\n  return sign + result;\n}\nconsole.log(ConvertNumber(13, 10));\nconsole.log(ConvertNumber(14, 2));\n\n\n\n\nERROR PROPAGATION\n\n\nSometime our code is working well with normal input. But with special one, they can cause error. So, we have to consider all situation can make Flaws, and handling them. \n\nThis example code below has an if..else to handle the wrong input if user types not a number in the prompt input\n\n\nfunction promptNumber(question) {\n  var result = Number(prompt(question, \n));\n  if (isNaN(result)) return null;\n  else return result;\n}\nconsole.log(promptNumber(\nHow many trees do you see?\n));\n\n\n\n\nEXCEPTION\n\n\nIn the Error Propagation, we can control the errors if we know them. But what will happen if we don't know the error? For solving this problem, javascript provides for us an try...catch.. to control error we dont know or not sure\n\n\ntry {\n    throw new Error(\nInvalid defination\n);\n} catch (error){\n    console.log(error);\n}\n\nfunction promtDirection(question){\n    var result = prompt(question, \n);\n    if (result.toLowerCase() == \nleft\n) return \nL\n;\n    if (result.toLowerCase() == \nright\n) return \nR\n;\n    throw new Error(\nInvalid direction: \n + result);\n}\n\nfunction look(){\n    if (promtDirection(\nWhich way?\n) == \nL\n) {\n        return \na house\n;\n    }\n    else{\n        return \ntwo angry bears\n;\n    }\n}\n\ntry {\n    console.log(\nyou see\n, look());\n} catch (error) {\n    console.log(\nSomething went wrong: \n + error);\n}\n\n\n\n\nCLEAN UP AFTER EXCEPTIONS\n\n\nWe have a block of code below:\n\n\nvar context = null;\nfunction withContext(newContext, body){\n  var oldContext = context;\n  context = newContext;\n  var result = body();\n  context = oldContext;\n  return result;\n}\nwithContext(\nnew\n, function(){\n  var a = b/0;\n  return a;\n});\n\n\n\n\nWhat would happend with context? It cannot be excute the last line code, because in withContext function, it will throw off the stack by an exception. So javascript provides a \ntry...finally...\n\n\nvar context = null;\nfunction withContext(newContext, body){\n  var oldContext = context;\n  context = newContext;\n  try{\n    return body();\n  } finally {\n    context = oldContext;\n  }\n}\nwithContext(\nnew\n, function(){\n  var a = b/0;\n  return a;\n});\n\n\n\n\nSELECTIVE CATCHING\n\n\nThere are some errors cannot handle by environment. So, if we let the error go through, it can cause broken program.\n\nFor examnple, the Error() in environment cannot catch the infinitive loop in the try block, if we dont catch this problem, the programm will crash soon\n\n\nfor (;;) {\n  try {\n    var dir = promtDirection(\nWhere?\n);\n    console.log(\nYou chose \n, dir);\n    break;\n  } catch (e) {\n    console.log(\nNot a valid direction. Try again.\n);\n  }\n}\n\n\n\n\nThe loop will break out if the promptDirection() can excute. \n\nBut it doesn't. Because it is not defined before, so the environment catch it and go through the catch to show error \n\nThe circle again and again will make the program crash. \n\n\nSo we will create a special Exception.\n\n\nfunction InputError(message){\n  this.message = message;\n  this.stack = (new Error()).stack;\n}\nInputError.prototype = Object.create(Error.prototype);\nInputError.prototype.name = \nInputError\n;\n\n\n\n\nError: has an property is stack. it contains all exception, which environment can catch.\nThen, we have the promptDirection function to return the result if Enter valid format, or an exception if invalid\n\n\nfunction promptDirection(question){\n  var result = prompt(question, \n);\n  if (result.toLowerCase() == \nleft\n) return \nL\n;\n  if (result.toLowerCase() == \nright\n) return \nR\n;\n  throw new InputError(\nInvalid direction: \n + result);\n}\n\n\n\n\nFinally, we can catch all exception we want\n\n\nfor (;;){\n  try {\n    var dir = promptDirection(\nWhere?\n);\n    console.log(\nYou choose \n, dir);\n    break;\n  } catch(e) {\n    if (e instanceof InputError){\n      console.log(\nNot a valid direction. Try again. \n);\n    }\n    else {\n      throw e;\n    }\n  }\n}\n\n\n\n\nASSERTIONS\n\n\nfunction AssertionFailed(message) {\n  this.message = message;\n}\nAssertionFailed.prototype = Object.create(Error.prototype);\n\nfunction assert(test, message) {\n  if (!test)\n    throw new AssertionFailed(message);\n}\n\nfunction lastElement(array) {\n  assert(array.length \n 0, \nempty array in lastElement\n);\n  return array[array.length - 1];\n}", 
            "title": "Error Handling"
        }, 
        {
            "location": "/error_handling/#strict-mode", 
            "text": "This is the way to find errors that javascript ignores.\nExample is using an undefined variable. if we dont use strick mode, then everything will be ok, but if using, the error will be shown  function SpotProblem(){\n//      use strict ;\n    for (counter = 0; counter   10; counter++){\n        console.log( Good! );\n    }\n}\nSpotProblem();\nconsole.log(counter);  strick mode can find error when using this in local, but it is still in global.\nExample: When we forget to declare the key word \"new\" when create an new Object  use strict ;\nfunction Person(name){\n    this.name = name;\n}\nvar john = Person( John );\nconsole.log(name);  And there are another cases, that trick mode is not allowed: Delete an object is not allowed  use strict ;\nvar x = 3.14;\ndelete x; use strict ;\nvar obj = {v1: 3, v2: 4};\ndelete pbj; use strict ;\nvar func = function(){};\ndelete func;  Duplicate parameter is not allowed  use strict ;\nvar func = function(a1, a1){\n    console.log(a1);\n}  Reserve Word is not allowed to name variable  use strict ;\nvar arguments = 5;\nvar eval = 6;\nconsole.log(arguments);\nconsole.log(eval);", 
            "title": "STRICT MODE"
        }, 
        {
            "location": "/error_handling/#testing", 
            "text": "Testing makes sure that the program working well, and if there are any changes, testing will automatic show us the error, thus, we know where need to fix  function Vector(x, y){\n    this.x = x;\n    this.y = y;\n}\nVector.prototype.plus = function(other){\n    return new Vector(this.x + other.x, this.y + other.y);\n}\n\nfunction TestVector(){\n    var p1 = new Vector(10, 20);\n    var p2 = new Vector(-10, 5);\n    var p3 = p1.plus(p2);\n\n    if (p1.x !== 10) return  fail: x property ;\n    if (p1.y !== 20) return  fail: y property ;\n    if (p2.x !== -10) return  fail: nagative x property ;\n    if (p2.y !== 5) return  fail: y property ;\n    if (p3.x !== 0) return  fail: x property from plus ;\n    if (p3.y !== 25) return  fail: y property from plus ;\n    return  Vector is Oke ;\n}\nTestVector();", 
            "title": "TESTING"
        }, 
        {
            "location": "/error_handling/#debugging", 
            "text": "when the testing is fail, we have to debug to find the bugs.  \nThe first we should guess the bug. And then we put break point in the line, we assume it make bug  \nIf that is the exactly bug we want to find, then we fix it, and write more test for this case  \nIn this example code below, the function convert the number in the decima to another. we run and see the result is wrong, so we guess that the error may be caused by the result variable, then we put break point in the line contains result variable.  function ConvertNumber(n, base) {\n  var result =  , sign =  ;\n  if (n   0) {\n    sign =  - ;\n    n = -n;\n  }\n  do {\n    result = String(n % base) + result;\n    n /= base; //-  n = Math.floor(n / base);\n  } while (n   0);\n  return sign + result;\n}\nconsole.log(ConvertNumber(13, 10));\nconsole.log(ConvertNumber(14, 2));", 
            "title": "DEBUGGING"
        }, 
        {
            "location": "/error_handling/#error-propagation", 
            "text": "Sometime our code is working well with normal input. But with special one, they can cause error. So, we have to consider all situation can make Flaws, and handling them.  \nThis example code below has an if..else to handle the wrong input if user types not a number in the prompt input  function promptNumber(question) {\n  var result = Number(prompt(question,  ));\n  if (isNaN(result)) return null;\n  else return result;\n}\nconsole.log(promptNumber( How many trees do you see? ));", 
            "title": "ERROR PROPAGATION"
        }, 
        {
            "location": "/error_handling/#exception", 
            "text": "In the Error Propagation, we can control the errors if we know them. But what will happen if we don't know the error? For solving this problem, javascript provides for us an try...catch.. to control error we dont know or not sure  try {\n    throw new Error( Invalid defination );\n} catch (error){\n    console.log(error);\n}\n\nfunction promtDirection(question){\n    var result = prompt(question,  );\n    if (result.toLowerCase() ==  left ) return  L ;\n    if (result.toLowerCase() ==  right ) return  R ;\n    throw new Error( Invalid direction:   + result);\n}\n\nfunction look(){\n    if (promtDirection( Which way? ) ==  L ) {\n        return  a house ;\n    }\n    else{\n        return  two angry bears ;\n    }\n}\n\ntry {\n    console.log( you see , look());\n} catch (error) {\n    console.log( Something went wrong:   + error);\n}", 
            "title": "EXCEPTION"
        }, 
        {
            "location": "/error_handling/#clean-up-after-exceptions", 
            "text": "We have a block of code below:  var context = null;\nfunction withContext(newContext, body){\n  var oldContext = context;\n  context = newContext;\n  var result = body();\n  context = oldContext;\n  return result;\n}\nwithContext( new , function(){\n  var a = b/0;\n  return a;\n});  What would happend with context? It cannot be excute the last line code, because in withContext function, it will throw off the stack by an exception. So javascript provides a  try...finally...  var context = null;\nfunction withContext(newContext, body){\n  var oldContext = context;\n  context = newContext;\n  try{\n    return body();\n  } finally {\n    context = oldContext;\n  }\n}\nwithContext( new , function(){\n  var a = b/0;\n  return a;\n});", 
            "title": "CLEAN UP AFTER EXCEPTIONS"
        }, 
        {
            "location": "/error_handling/#selective-catching", 
            "text": "There are some errors cannot handle by environment. So, if we let the error go through, it can cause broken program. \nFor examnple, the Error() in environment cannot catch the infinitive loop in the try block, if we dont catch this problem, the programm will crash soon  for (;;) {\n  try {\n    var dir = promtDirection( Where? );\n    console.log( You chose  , dir);\n    break;\n  } catch (e) {\n    console.log( Not a valid direction. Try again. );\n  }\n}  The loop will break out if the promptDirection() can excute.  \nBut it doesn't. Because it is not defined before, so the environment catch it and go through the catch to show error  \nThe circle again and again will make the program crash.   So we will create a special Exception.  function InputError(message){\n  this.message = message;\n  this.stack = (new Error()).stack;\n}\nInputError.prototype = Object.create(Error.prototype);\nInputError.prototype.name =  InputError ;  Error: has an property is stack. it contains all exception, which environment can catch.\nThen, we have the promptDirection function to return the result if Enter valid format, or an exception if invalid  function promptDirection(question){\n  var result = prompt(question,  );\n  if (result.toLowerCase() ==  left ) return  L ;\n  if (result.toLowerCase() ==  right ) return  R ;\n  throw new InputError( Invalid direction:   + result);\n}  Finally, we can catch all exception we want  for (;;){\n  try {\n    var dir = promptDirection( Where? );\n    console.log( You choose  , dir);\n    break;\n  } catch(e) {\n    if (e instanceof InputError){\n      console.log( Not a valid direction. Try again.  );\n    }\n    else {\n      throw e;\n    }\n  }\n}", 
            "title": "SELECTIVE CATCHING"
        }, 
        {
            "location": "/error_handling/#assertions", 
            "text": "function AssertionFailed(message) {\n  this.message = message;\n}\nAssertionFailed.prototype = Object.create(Error.prototype);\n\nfunction assert(test, message) {\n  if (!test)\n    throw new AssertionFailed(message);\n}\n\nfunction lastElement(array) {\n  assert(array.length   0,  empty array in lastElement );\n  return array[array.length - 1];\n}", 
            "title": "ASSERTIONS"
        }, 
        {
            "location": "/testing/", 
            "text": "Mocha\n\n\nMocha is a feature-rich JavaScript test framework running on Node.js and the browser, making asynchronous testing simple and fun. Mocha tests run serially, allowing for flexible and accurate reporting, while mapping uncaught exceptions to the correct test cases.\n\n\nInstallation\n\n\nbower install -D mocha chai\n\n\n\n\nUsage\n\n\nStep 1. Make \nindex.html\n\n\n!DOCTYPE html\n\n\nhtml\n\n\nhead\n\n  \nmeta charset=\nutf-8\n\n  \ntitle\nTests\n/title\n\n  \nlink rel=\nstylesheet\n media=\nall\n href=\nmocha.css\n\n\n/head\n\n\nbody\n\n  \ndiv id=\nmocha\n/div\n\n  \nscript src=\nmocha.js\n/script\n\n  \nscript src=\nchai.js\n/script\n\n  \nscript src=\nfunctions.js\n/script\n\n  \nscript\nmocha.setup('bdd'); chai.should();\n/script\n\n  \nscript src=\ntests.js\n/script\n\n  \nscript\nmocha.run();\n/script\n\n\n/body\n\n\n/html\n\n\n\n\n\nStep 2. Edit \nfunctions.js\n\n\nfunction sum(a, b){\n  return a + b;\n}\n\nfunction asynchronusSum(a, b){\n  return new Promise(function(fulfill, reject){\n    fulfill(a + b);\n  });\n}\n\n\n\n\nStep 3. Edit \ntests.js\n\n\ndescribe('Calculator', function() {\n  this.timeout(5000);\n  describe('#sum()', function() {\n    it('should return sum of two number', function() {\n      sum(2, 3).should.equal(5)\n    });\n  });\n\n  describe('#asynchronusSum()', function() {\n    it('should return sum of two number', function(done) {\n      asynchronusSum(2, 3).then(function(output){\n          output.should.equal(5);\n          done();\n      })\n    });\n  });\n});", 
            "title": "Testing"
        }, 
        {
            "location": "/testing/#mocha", 
            "text": "Mocha is a feature-rich JavaScript test framework running on Node.js and the browser, making asynchronous testing simple and fun. Mocha tests run serially, allowing for flexible and accurate reporting, while mapping uncaught exceptions to the correct test cases.", 
            "title": "Mocha"
        }, 
        {
            "location": "/testing/#installation", 
            "text": "bower install -D mocha chai", 
            "title": "Installation"
        }, 
        {
            "location": "/testing/#usage", 
            "text": "Step 1. Make  index.html  !DOCTYPE html  html  head \n   meta charset= utf-8 \n   title Tests /title \n   link rel= stylesheet  media= all  href= mocha.css  /head  body \n   div id= mocha /div \n   script src= mocha.js /script \n   script src= chai.js /script \n   script src= functions.js /script \n   script mocha.setup('bdd'); chai.should(); /script \n   script src= tests.js /script \n   script mocha.run(); /script  /body  /html   Step 2. Edit  functions.js  function sum(a, b){\n  return a + b;\n}\n\nfunction asynchronusSum(a, b){\n  return new Promise(function(fulfill, reject){\n    fulfill(a + b);\n  });\n}  Step 3. Edit  tests.js  describe('Calculator', function() {\n  this.timeout(5000);\n  describe('#sum()', function() {\n    it('should return sum of two number', function() {\n      sum(2, 3).should.equal(5)\n    });\n  });\n\n  describe('#asynchronusSum()', function() {\n    it('should return sum of two number', function(done) {\n      asynchronusSum(2, 3).then(function(output){\n          output.should.equal(5);\n          done();\n      })\n    });\n  });\n});", 
            "title": "Usage"
        }, 
        {
            "location": "/package_manager/", 
            "text": "Bower\n\n\nA package manager for the web\n\n\nWeb sites are made of lots of things \u2014 frameworks, libraries, assets, utilities, and rainbows. Bower manages all these things for you.\n\n\nBower works by fetching and installing packages from all over, taking care of hunting, finding, downloading, and saving the stuff you\u2019re looking for. Bower keeps track of these packages in a manifest file, bower.json. How you use packages is up to you. Bower provides hooks to facilitate using packages in your tools and workflows.\n\n\nBower is optimized for the front-end. Bower uses a flat dependency tree, requiring only one version for each package, reducing page load to a minimum.\n\n\nhttp://bower.io/\n\n\n[code]\nbower install jquery underscore moment sprintf -S\n[/code]\n\n\nHTML \nbower based\n\n\nscript src=\n./bower_components/jquery/dist/jquery.js\n/script\n\n\nscript src=\n./bower_components/moment/moment.js\n/script\n\n\nscript src=\n./bower_components/underscore/underscore.js\n/script\n\n\nscript src=\n./bower_components/sprintf/src/sprintf.js\n/script\n\n\n\n\n\nHTML \ncdn based\n\n\nscript src=\n//cdnjs.cloudflare.com/ajax/libs/jquery/3.0.0-beta1/jquery.js\n/script\n\n\nscript src=\n//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore.js\n/script\n\n\nscript src=\n//cdnjs.cloudflare.com/ajax/libs/sprintf/1.0.3/sprintf.js\n/script", 
            "title": "Package Manager"
        }, 
        {
            "location": "/package_manager/#bower", 
            "text": "A package manager for the web  Web sites are made of lots of things \u2014 frameworks, libraries, assets, utilities, and rainbows. Bower manages all these things for you.  Bower works by fetching and installing packages from all over, taking care of hunting, finding, downloading, and saving the stuff you\u2019re looking for. Bower keeps track of these packages in a manifest file, bower.json. How you use packages is up to you. Bower provides hooks to facilitate using packages in your tools and workflows.  Bower is optimized for the front-end. Bower uses a flat dependency tree, requiring only one version for each package, reducing page load to a minimum.  http://bower.io/  [code]\nbower install jquery underscore moment sprintf -S\n[/code]  HTML  bower based  script src= ./bower_components/jquery/dist/jquery.js /script  script src= ./bower_components/moment/moment.js /script  script src= ./bower_components/underscore/underscore.js /script  script src= ./bower_components/sprintf/src/sprintf.js /script   HTML  cdn based  script src= //cdnjs.cloudflare.com/ajax/libs/jquery/3.0.0-beta1/jquery.js /script  script src= //cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore.js /script  script src= //cdnjs.cloudflare.com/ajax/libs/sprintf/1.0.3/sprintf.js /script", 
            "title": "Bower"
        }, 
        {
            "location": "/build_tool/", 
            "text": "Gulp\n\n\nAutomate and enhance your workflow\n\n\nHere's some of the sweet stuff you try out with this repo.\n\n\n\n    \nCompile CoffeeScript (with source maps!)\n\n    \nCompile Handlebars Templates\n\n    \nCompile SASS with Compass\n\n    \nLiveReload\n\n    \nrequire non-CommonJS code, with dependencies\n\n    \nSet up module aliases\n\n    \nRun a static Node server (with logging)\n\n    \nPop open your app in a Browser\n\n    \nReport Errors through Notification Center\n\n    \nImage processing\n\n\n\n\n\nInstallation\n\n\nnpm install -S gulp gulp-concat\n\n\n\n\nUsage\n\n\nWatch\n\n\nvar gulp = require('gulp');\nvar concat = require('gulp-concat');\nvar uglify = require('gulp-uglify');\nvar jsdoc = require(\ngulp-jsdoc\n);\n\nvar third_parties = [\n  \nbower_components/jquery/dist/jquery.js\n,\n  \nbower_components/bootstrap/dist/js/bootstrap.js\n,\n  \nbower_components/underscore/underscore.js\n,\n  \nbower_components/ring/ring.js\n,\n  \nbower_components/moment/moment.js\n,\n  \nbower_components/sprintf/src/sprintf.js\n,\n  \nbower_components/uri.js/src/URI.js\n,\n  \nbower_components/run/run.js\n\n];\n\nvar modules = [\n  \nmodules/your_script.js\n\n];\n\ngulp.watch(third_parties, ['js_thirdparty']);\ngulp.watch(modules, ['js_modules']);\n\ngulp.task('js_thirdparty', function () {\n  return gulp\n    .src(third_parties)\n    .pipe(concat('third_party.uglify.js'))\n    .pipe(uglify())\n    .pipe(gulp.dest('./scripts'));\n});\n\ngulp.task('js_modules', function () {\n  return gulp\n    .src(modules)\n    .pipe(concat('modules.uglify.js'))\n    //.pipe(uglify())\n    .pipe(gulp.dest('./scripts'));\n});\n\ngulp.task('documentation', function () {\n  return gulp\n    .src(\n./modules/*/*.js\n)\n    .pipe(jsdoc('./documentation'));\n});\n\ngulp.task('default', ['js_thirdparty', 'js_modules']);\n\n\n\n\nhttp://gulpjs.com/\n\n\nDeprecated\n\n\ngrunt", 
            "title": "Build Tool"
        }, 
        {
            "location": "/build_tool/#installation", 
            "text": "npm install -S gulp gulp-concat", 
            "title": "Installation"
        }, 
        {
            "location": "/build_tool/#usage", 
            "text": "Watch  var gulp = require('gulp');\nvar concat = require('gulp-concat');\nvar uglify = require('gulp-uglify');\nvar jsdoc = require( gulp-jsdoc );\n\nvar third_parties = [\n   bower_components/jquery/dist/jquery.js ,\n   bower_components/bootstrap/dist/js/bootstrap.js ,\n   bower_components/underscore/underscore.js ,\n   bower_components/ring/ring.js ,\n   bower_components/moment/moment.js ,\n   bower_components/sprintf/src/sprintf.js ,\n   bower_components/uri.js/src/URI.js ,\n   bower_components/run/run.js \n];\n\nvar modules = [\n   modules/your_script.js \n];\n\ngulp.watch(third_parties, ['js_thirdparty']);\ngulp.watch(modules, ['js_modules']);\n\ngulp.task('js_thirdparty', function () {\n  return gulp\n    .src(third_parties)\n    .pipe(concat('third_party.uglify.js'))\n    .pipe(uglify())\n    .pipe(gulp.dest('./scripts'));\n});\n\ngulp.task('js_modules', function () {\n  return gulp\n    .src(modules)\n    .pipe(concat('modules.uglify.js'))\n    //.pipe(uglify())\n    .pipe(gulp.dest('./scripts'));\n});\n\ngulp.task('documentation', function () {\n  return gulp\n    .src( ./modules/*/*.js )\n    .pipe(jsdoc('./documentation'));\n});\n\ngulp.task('default', ['js_thirdparty', 'js_modules']);  http://gulpjs.com/", 
            "title": "Usage"
        }, 
        {
            "location": "/build_tool/#deprecated", 
            "text": "grunt", 
            "title": "Deprecated"
        }, 
        {
            "location": "/make_module/", 
            "text": "Make Module\n\n\nsample modules: \nunderscore\n, \nmomentjs\n\n\nFolder Structure\n\n\n|- docs\n|- test\n|- src\n|   |-- your_module.js\n|- .gitignore\n|- bower.json", 
            "title": "Make Module"
        }, 
        {
            "location": "/make_module/#make-module", 
            "text": "sample modules:  underscore ,  momentjs", 
            "title": "Make Module"
        }, 
        {
            "location": "/make_module/#folder-structure", 
            "text": "|- docs\n|- test\n|- src\n|   |-- your_module.js\n|- .gitignore\n|- bower.json", 
            "title": "Folder Structure"
        }
    ]
}